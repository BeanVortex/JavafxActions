name: ci

on: [ push, pull_request ]

jobs:
  build-windows:
    runs-on: [ windows-latest ]
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 19.0.2
        uses: actions/setup-java@v3
        with:
          java-version: 19.0.2
          distribution: 'oracle'
          gpg-private-key: ${{ secrets.GPG_KEY }}
          gpg-passphrase: PASSPHRASE
      - name: Build with Gradle
        run: ./gradlew.bat build
        env:
          PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      - name: Create Distribution
        run: .\builders\windows.bat
      - uses: actions/upload-artifact@v3
        with:
          name: Actions demo
          path: build/releases


  create_release:
    runs-on: [ ubuntu-latest ]
    needs: [ build-windows ]
    steps:
      - name: Draft a release
        id: draft_release
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            ## body data here
          draft: true
          prerelease: false
      - name: List Files
        id: list_files
        run: |
          echo "::set-output name=files::$(ls build/releases)"
      - name: Upload Release Assets
        id: upload_release_assets
        run: |
          for file in ${{ steps.list_files.outputs.files }}; do
            if [[ $file == *.zip ]]; then
              content_type="application/zip"
            elif [[ $file == *.msi ]]; then
              content_type="application/x-msi"
            elif [[ $file == *.exe ]]; then
              content_type="application/octet-stream"
            elif [[ $file == *.jar ]]; then
              content_type="application/java-archive"
            else
              content_type="application/octet-stream"
            fi
            echo "Uploading $file"
            echo "::set-env name=CONTENT_TYPE::$content_type"
            echo "::set-env name=FILE::$file"
            gh release upload ${{ steps.draft_release.outputs.upload_url }} "./build/releases/$file" --c $content_type
          done
