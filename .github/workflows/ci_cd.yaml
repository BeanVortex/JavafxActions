name: ci

on: [ push, pull_request ]

jobs:
  build-windows:
    runs-on: [ windows-latest ]
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 19.0.2
        uses: actions/setup-java@v3
        with:
          java-version: 19.0.2
          distribution: 'oracle'
          gpg-private-key: ${{ secrets.GPG_KEY }}
          gpg-passphrase: PASSPHRASE
      - name: Build with Gradle
        run: ./gradlew.bat build
        env:
          PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      - name: Create Distribution
        run: .\builders\windows.bat
  #      - uses: actions/upload-artifact@v3
  #        with:
  #          name: Actions demo
  #          path: build/releases


  create_release:
    runs-on: [ ubuntu-latest ]
    needs: [ build-windows ]
    steps:
      - name: Draft a release
        id: draft_release
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          draft: true
          prerelease: false
      - name: List Files
        id: list_files
        run: |
          echo "{files}={$(ls build/releases)}" >> $GITHUB_OUTPUT
      - name: Upload Release Assets
        id: upload_release_assets
        run: |
          const github = require('@actions/github');
          const fs = require('fs');
          const path = require('path');

          const octokit = github.getOctokit(process.env.GITHUB_TOKEN);
          const releaseUrl = '${{ steps.draft_release.outputs.upload_url }}';

          const files = fs.readdirSync('build/releases/');
          for (const file of files) {
            const filePath = path.join('build/releases/', file);
            const fileStat = fs.statSync(filePath);
            if (fileStat.isFile()) {
              const uploadResponse = await octokit.repos.uploadReleaseAsset({
                url: releaseUrl,
                headers: {
                  'content-type': 'application/octet-stream',
                  'content-length': fileStat.size
                },
                name: file,
                data: fs.readFileSync(filePath)
              });
              console.log(`Uploaded asset: ${uploadResponse.data.name}`);
            }
          }
      
